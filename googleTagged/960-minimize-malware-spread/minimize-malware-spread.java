class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        HashSet<Integer> hs = new HashSet<>();
        int n = graph.length;
        int maxInfected = bfs(graph, initial, -1);
        int minInfected = maxInfected;
        int node = Integer.MAX_VALUE;
        for (int skippingNode : initial) {
            int infected = bfs(graph, initial, skippingNode);
            if (infected < minInfected) {
                minInfected = infected;
                node = skippingNode;
            } else if (infected == minInfected) {
                node = Math.min(node, skippingNode);
            }
        }
        return node;
    }

    public int bfs(int graph[][], int[] initial, int skippingNode) {
        Queue<Integer> q = new LinkedList<>();
        int n = graph.length;
        int count = 0;
        boolean vis[] = new boolean[n];
        for (int i : initial) {
            if (i != skippingNode) {
                q.add(i);
                count++;
                vis[i] = true;
            }
        }
        while (!q.isEmpty()) {
            int cur = q.poll();
            for (int i = 0; i < n; i++) {
                if (graph[cur][i] == 1 && !vis[i]) {
                    count++;
                    q.add(i);
                    vis[i] = true;
                }
            }
        }
        return count;
    }
}